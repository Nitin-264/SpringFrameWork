Working with Lobs
+++++++++++++++++

1. Entity class
package com.app.nitin.entity;

import java.io.Serializable;
import java.time.LocalDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Lob;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import javax.persistence.GenerationType;


@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@RequiredArgsConstructor
public class MarriageSeeker implements Serializable {

	@Id
	@GeneratedValue(strategy = GenreationType.IDENTITY)
	private Long  id;

	@NonNull
	@Column(length=20)
	private String name;
	@NonNull
	@Column(length=20)
	private  String addrs;

	@NonNull
	@Lob
	private  byte[] photo;

	@NonNull
	private  LocalDateTime dob;

	@NonNull
	@Lob
	private  char[]  biodata;

	@NonNull
	private  boolean indian;

}

2. 
package com.app.nitin.repository;

import org.springframework.data.repository.PagingAndSortingRepository;

import com.app.nitin.entity.MarriageSeeker;

public interface IMarriageSeekerRepo extends PagingAndSortingRepository<MarriageSeeker, Long>{
	
}

3. 
package com.app.nitin.runner;

import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.OutputStream;
import java.io.Writer;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import com.app.nitin.repository

import com.app.nitin.entity.MarriageSeeker;

@Component
public class LOBsTestRunner implements CommandLineRunner {

	@Autowire
	private IMarriageSeekerRepo repo;

	@Override
	public void run(String... args) throws Exception {
		/*
                Scanner sc=new Scanner(System.in);
		System.out.println("Enter person name::");
		String name=sc.next();

		System.out.println("Enter person address::");
		String addrs=sc.next();

		System.out.println("Enter Person Photo file complete path::");
		String photoPath=sc.next().replace("?","");

		System.out.println("Enter Person biodata file complete path::");
		String biodataPath=sc.next().replace("?","");

		System.out.println("Is the Person Indian? ");
		boolean indian=sc.nextBoolean();

		//prepare  byte[] representing photo file content
		InputStream is=new FileInputStream(photoPath);
		byte[] photoData=new byte[is.available()];
		photoData=is.readAllBytes();

		//prepare  char[] representing biddata file content
		File file=new File(biodataPath);
		Reader reader=new FileReader(file);
		char bioDataContent[]=new char[(int) file.length()];
		reader.read(bioDataContent);
		
		//prepare Entity class obj
		 MarriageSeeker seeker=new MarriageSeeker(name, addrs,photoData ,LocalDateTime.of(1990,11,23,12,45),
						bioDataContent , indian);
		 System.out.println(service.registerMarriageSeeker(seeker));
	     */

		System.out.println("=============================");
		Optional<MarriageSeeker> opt=service.searchSeekerById(4L);
		if(opt.isPresent()) {
			MarriageSeeker seeker=opt.get();
			System.out.println(seeker.getId()+"  "+seeker.getName()+"  "+seeker.getAddrs()+" "+seeker.isIndian());

			OutputStream os=new FileOutputStream("retrieve_photo.gfif");
			os.write(seeker.getPhoto());
			os.flush();

			Writer writer=new FileWriter("retrieve_biodata.txt");
			writer.write(seeker.getBiodata());
			writer.flush();

			os.close();
			writer.close();
			System.out.println("LOBs are retrieved");
		}
		else {
			System.out.println("Records not found");
		}
	}

}

4. application.properties

#DataSource cfg
spring.datasource.url=jdbc:mysql:///practise
spring.datasource.username=root
spring.datasource.password=root123

# JPA-Hiberante properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.format_sql=true
#other possible values create,validate,create-drop



