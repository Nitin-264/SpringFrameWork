JpaRepository:-
=> This interface internally extends PaginingAndSortingRepository.
=> This time find() methods returns List<T>
   (in CrudRepository it is Iterable<T> type).
=> It works only/mainly for SQL Database. (Bit faster).
=> Custom Queries, Data JPA findBy methods.
=> Find object by Example(C).

findAll(Example): This method is used to fetch data based on example object(prob obj). 
                  It will generate one SQL query dynamic using non-null fields.

*) JDK 1.8 we can define static and default methods in interfaces.
	Student sob = new Student();
	sob.setStdFee(400.0);
	sob.setStdName("AJAY");
	Example<Student> prob = Example.of(sob);
	repo.findAll(prob).forEach(System.out::println);

========================Code================================
1. Entity
package com.app.nitin.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
@Table(name="stdtab")
public class Student {
	@Id
	@Column(name="sid")
	@GeneratedValue(strategy = GenerationType.IDENTITY) //mysql (Auto increment)
	private Integer stdId;
	
	@Column(name="sname")
	private String stdName;
	@Column(name="sfee")
	private Double stdFee;
	
	@Column(name="sdoj")
	//@Temporal(TemporalType.DATE)//stores only date
	//@Temporal(TemporalType.TIME)//stores only time
	@Temporal(TemporalType.TIMESTAMP)//stores both and time (default)
	private Date stdDoj;
}

2. Repository Interface
package com.app.nitin.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.nitin.entity.Student;

public interface StudentRepository 
	extends JpaRepository<Student, Integer> {

}

3. Runner class
package com.app.nitin.runner;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Component;

import com.app.nitin.entity.Student;
import com.app.nitin.repo.StudentRepository;

@Component
public class StudentTestRunner implements CommandLineRunner {

	@Autowired
	private StudentRepository repo;
	
	public void run(String... args) throws Exception {
				
		Student s1 = new Student();
		s1.setStdName("SAM");
		s1.setStdFee(400.0);
		s1.setStdDoj(new Date());
		repo.save(s1);
		
		List<Student> list = repo.findAll();
		System.out.println(list.getClass().getName());
		list.forEach(System.out::println);
		
		Student sob = new Student();
		sob.setStdFee(400.0);
		sob.setStdName("AJAY");
		Example<Student> prob = Example.of(sob);
		repo.findAll(prob).forEach(System.out::println);
	}

}

4. application.properties
spring.datasource.url = jdbc:mysql:///practise
spring.datasource.username = root
spring.datasource.password=root123

#hibernate using jpa properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

====================================================================
********************************************************************
		Custom Query in Spring Boot Data JPA
********************************************************************
====================================================================
*) Programmer can define their own query. ie called as Custom Query.
*) These can be used for SELECT, DELETE and UPDATE.
	[INSERT NOT SUPPORTED]

*) findBy and @Query are two concepts used for custom queries.
	findBy - only for SELECT (Used for simple SELECT operations)
	@Query - supports both SELECT(default) and NON-SELECT(@Modifying and @Transactional).

*) Define abstract method (any name) in Repository interface dynamic proxy gives implementation.
 case#1
      List<T> findBy_____(<params>);

 case#2
     @Query("SELECT ....  FROM ..")
     List<T> <anyName> (<Params>);

Workflow
========
a. findBy(___)
	=> It is used for select operation with WHERE condition.
	=> WHERE condition is created using methodNaming rules.
	=> No need to write any Query based on the method syntax query will be generated.
		syntax :: <OUTPUT> findBy<VariableName><condition>(<params>)
			     |
			 List<T>,T,Optional<T>
			 Variable  :: Entity class fieldnames
			 condition :: refer to chart 


eg#1. Only methods are defined inside RepoInterface by extending JpaRepository<Student,Integer>

	//select * from student where sname = ?
      public List<Student> findBySname(String name);

	//select * from student where sname = ?
      public List<Student> findBySnameIs(String name);

	//select * from student where sname = ?
      public List<Student> findBySnameEquals(String name);

	//select * from student where saddress = ? 
      public List<Student> findBySaddress(String address);

	//select * from student where sage< ? 
      List<Student> findBySageLessThan(Integer sage);

	//select * from student where sage<= ? 
      List<Student> findBySageLessThanEqual(Integer sage);

	//select * from student where sname is null
      List<Student> findBySnameIsNull();

	//select * from student where sname is not null
      List<Student> findBySnameIsNotNull();
      List<Student> findBySnameNotNull();

	//select * from student where sname like '___'
	//select * from student where sname like 'A%'
	//select * from student where sname like '%A'
	//select * from student where sname like '%A%'
      List<Student> findBySnameLike(String expression);


	//select * from student where sname like 'A%'
      List<Student> findBySnameStartingWith(String input);

	//select * from student where sname like '%A'
      List<Student> findBySnameEndingWith(String input);
	
	//select * from student where sname like '%A%'
      List<Student> findBySnameContaining(String input);

*) Some times findBy method is a not a good approch for complex or lengthy queries.

	//select * from student where sage<=? or sname like ?
      List<Student> findBySageLessThanEqualOrSnameLike(Integer sage,String sname);
==========================================================================================================================================
				Example code for findBy
==========================================================================================================================================
1. Entity class
package com.app.nitin.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="booktab")
public class Book {
	@Id
	@Column(name="bid")
	private Integer bookId;
	
	@Column(name="bname")
	private String bookName;

	@Column(name="bauth")
	private String author;
	
	@Column(name="bcost")
	private Double bookCost;
	
	@Column(name="btype")
	private String bookType;
	
}

2. Repository Interface
package com.app.nitin.repo;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.nitin.entity.Book;

public interface BookRepository extends JpaRepository<Book, Integer> {

	//findBy -->SELECT + where = !=, > < null, not null, and or...
	//SQL: select * from book where book_cost=? 
	List<Book> findByBookCostLessThanEqual(Double bookCost);

	//SQL: select * from book where book_id!=? 
	//List<Book> findByBookIdNot(Integer bookId);
	
	//SQL: select * from book where cost = ? 
	//List<Book> findByBookCostEqual(Double bookCost);

	//SQL: select * from book where cost >= ? 
	//List<Book> findByBookCostGreaterThan(Double bookCost);
	
	//SQL: select * from book where author is null 
	List<Book> findByAuthorIsNull();
	
	//SQL: select * from book where author is not null 
	//List<Book> findByAuthorIsNotNull();
	//List<Book> findByAuthorNotNull();
	
	//------------Like Operator---------------------
	//SQL: Select * from book where author like ?
	List<Book> findByAuthorLike(String expression);
	
	//SQL: Select * from book where author like ? order by bookname DESC
	List<Book> findByAuthorLikeOrderByBookNameDesc(String expression);

	//SQL: Select * from book where author not like ?
	//List<Book> findByAuthorNotLike(String expression);

	//SQL: Select * from book where author like 'input%'
	List<Book> findByAuthorStartingWith(String input);
	
	
	//SQL: Select * from book where author like '%input'
	List<Book> findByAuthorEndingWith(String input);
	
	//SQL: Select * from book where author like '%input%'
	List<Book> findByAuthorContaining(String input);
	
	//SQL: Select * from book where bid between x and y
	List<Book> findByBookIdBetween(Integer id1,Integer id2);
	
	//--------------AND / OR --------------------------
	//SQL: select * from book where bookId <= ? or bookType like ?
	List<Book> findByBookIdLessThanEqualOrBookTypeLike(Integer bookId, String input);
	
	//SQL: select * from book where bookcost != ? and author not like ?
	//TASK FOR YOU
	
	//-------------single row-----------------------------
	Optional<Book> findByBookIdIs(Integer id);
	
}

3. Runner class
package com.app.nitin.runner;

import java.util.Arrays;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.nitin.entity.Book;
import com.app.nitin.repo.BookRepository;

@Component
public class TestDataRunner implements CommandLineRunner {
	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		repo.saveAll(
				Arrays.asList(
						new Book(101, "SBMS", "NITIN", 300.0, "Backend"),
						new Book(102, "CORE", "HAIDER", 200.0, "Backend"),
						new Book(103, "ADV", "ZABI", 400.0, "Backend"),
						new Book(104, "REACT", null, 500.0, "Frontend"),
						new Book(105, "HTML", "NITIN", 600.0, "Frontend"),
						new Book(106, "CSS", null, 300.0, "Frontend"),
						new Book(107, "ANGULAR", "SACHIN", 800.0, "Frontend"),
						new Book(108, "SQL", "KARTHIK", 200.0, "Database")
						)
				);
		
		//repo.findByBookCostLessThanEqual(500.0)
		//repo.findByAuthorIsNull()
		//repo.findByAuthorLike("A%")
		//repo.findByAuthorStartingWith("A")
		
		//repo.findByAuthorLike("%U")
		//repo.findByAuthorEndingWith("U")
		
		//repo.findByAuthorLike("%R%")
		//repo.findByAuthorContaining("R")
		
		//repo.findByAuthorLike("____")
		
		//repo.findByBookIdLessThanEqualOrBookTypeLike(105, "Front%")
		//repo.findByAuthorLikeOrderByBookNameDesc("A%")
		repo.findByBookIdBetween(101, 105)
		.forEach(System.out::println);
		
		Optional<Book> opt =  repo.findByBookIdIs(1050);
		if(opt.isPresent())
			System.out.println(opt.get());
		else 
			System.out.println("No Data Found");	
	}
}

4. application.properties
spring.application.name=01-spring-data-jpa-crudrepository
spring.datasource.url = jdbc:mysql:///practise
spring.datasource.username = root
spring.datasource.password=root123

#hibernate using jpa properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

@Query("JPQL/HQL") is used to write programmer defined query.

SQL: SQL querys are executed at database, these are database dependent.
SQL#1 executed at DB1 may or may not gets executed at DB#2.


JPQL/HQL : [Java Persistency Query Language / Hibernate Query Language]
=> Object Oriented Query concept.
=> This is created using ClassName and Variables names (not table and columns)
=> Dialect generates equal SQL query at runtime.

Ex:
SQL: (case insensitive)
     SELECT EID FROM EMPTAB WHERE ESAL > ?

JPQL/HQL: (Partially case - sensitive)
  	  SELECT empId FROM com.app.nitin.Employee WHERE empSal > ?

=> Java words like variable name, class name are case-sensitive.
=> SQL words SELECT, FROM, WHERE are case-insensitive.


=========================(INTERNAL FLOW)======================================
=> We define abstract method
=> Spring Boot Data JPA generates Hibernate code
=> Hibernate internally calls Dialect
=> Dialect has pre-defined(hardcoded) SQL format
=> Finally SQL query is generated and executed at DB.
==============================================================================
*) SELECT QUERY CAN RETURN OUTPUT in 3 WAYS (based on columns)
	List<T> 	: For fetching all columns 
	List<DataType>  : For fetching 1 column
	List<Object[]>  : For fetching >1 columns (but not all)

Q) What are possible returnTypes in JPQL/HQL Custom queries?
A) List For multiple rows
   Optional for Single Row.

 SQL: select * from emptab where eid=?
       1 row , all columns
       Optional<T>

=================code==================================
1. Entity
package com.app.nitin.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="emptab")
public class Employee {
	@Id
	@Column(name="eid")
	private Integer empId;
	
	@Column(name="ename")
	private String empName;
	
	@Column(name="esal")
	private Double empSal;
	
	@Column(name="edept")
	private String empDept;
	
}

2. Repository
package com.app.nitin.repo;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.app.nitin.entity.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, Integer>{
	//@Query("_________")
	//ReturnType  abstractMethodName(<Param>)
	/**
	 * This abstractMethodName can be any name...
	 * 
	 */

	//SQL: 1. fetch one column data
	@Query("SELECT e.empName FROM Employee e")
	//@Query("SELECT empName FROM Employee")
	List<String> getAllEmpNames();
	
	//SQL: 2 select all columns
	@Query("SELECT e FROM Employee e")
	//@Query("FROM Employee e")
	List<Employee> fetchAllEmps();
	
	//SQL: 3 select multiple columns
	@Query("SELECT e.empId, e.empName FROM Employee e")
	List<Object[]> fetchIdAndNames();
	
	//SQL:4 Fetch one column and one row data
	@Query("SELECT e.empName FROM Employee e WHERE e.empId=:id")
	Optional<String> getEmpNameById(Integer id);
	
	//SQL:5 fetch all columns and one row
	@Query("SELECT e FROM Employee e WHERE e.empId=:id")
	Optional<Employee> fetchEmployeeById(Integer id);
		
}

3. Runner class
package com.app.nitin.runner;

import java.util.Arrays;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.nitin.entity.Employee;
import com.app.nitin.repo.EmployeeRepository;

@Component
public class TestEmployeeASaveRunner implements CommandLineRunner {

	@Autowired
	private EmployeeRepository repo;
	
	public void run(String... args) throws Exception {
		repo.saveAll(
				Arrays.asList(
						 new Employee(101, "AA", 200.0, "DEV"),
						 new Employee(102, "BA", 500.0, "DEV"),
						 new Employee(103, "AC", 200.0, "QA"),
						 new Employee(104, "DD", 400.0, "QA"),
						 new Employee(105, "EF", 600.0, "DEV")
						)
				);
		
		
		repo.getAllEmpNames().forEach(System.out::println);
		repo.fetchAllEmps().forEach(System.out::println);
		
		repo.fetchIdAndNames() //returns Object[]
		.stream()
		.map(obj -> obj[0] + " : " + obj[1])
		.forEach(System.out::println);
		
		Optional<String> opt =  repo.getEmpNameById(101);
		if(opt.isPresent()) {
			System.out.println(opt.get());
		} else {
			System.out.println("NO Data");
		}
		
		Employee e =  repo.fetchEmployeeById(1040)
				.orElseThrow(()-> new RuntimeException("Not Found"));
		System.out.println(e);	
	}
}
4. application.properties
spring.application.name=01-spring-data-jpa-crudrepository
spring.datasource.url = jdbc:mysql:///practise
spring.datasource.username = root
spring.datasource.password=root123

#hibernate using jpa properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
==============================================================================================================================================
		  			HQL queries using position and named parameters
==============================================================================================================================================
1. Entity class
package com.app.nitin.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="booktab")
public class Book {
	@Id
	@Column(name="bid")
	private Integer bookId;
	
	@Column(name="bname")
	private String bookName;

	@Column(name="bauth")
	private String author;
	
	@Column(name="bcost")
	private Double bookCost;
	
	@Column(name="btype")
	private String bookType;
	
}

2. Repository interface
package com.app.nitin.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.app.nitin.entity.Book;

public interface BookRepository extends JpaRepository<Book, Integer> {

	//SQL: select * from booktab where author=?
	//@Query("SELECT b FROM Book b WHERE b.author=?1")
	@Query("SELECT b FROM Book b WHERE b.author = :abc")
	List<Book> getBooksByAuthor(@Param("abc")String author);
	
	//SQL: select * from booktab where author like ? or bcost > ?
	@Query("SELECT b FROM Book b WHERE b.author like ?1 OR b.bookCost > ?2 OR b.bookType=?3")
	//@Query("SELECT b FROM Book b WHERE b.bookCost > :bookCost OR b.author like :author")
	List<Book> getBooksAuthorCost(String author, Double bookCost);
	
	//SQL: select * from booktab where bid in (?,?,?)
	//@Query("SELECT b FROM Book b WHERE b.bookId in (?1)")
	@Query("SELECT b FROM Book b WHERE b.bookId in (:inputs)")
	List<Book> getBooksIds(List<Integer> inputs);
	
}
 
3. Runner class
package com.app.nitin.runner;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.nitin.entity.Book;
import com.app.nitin.repo.BookRepository;

@Component
public class TestDataRunner implements CommandLineRunner {
	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		repo.saveAll(
				Arrays.asList(
						new Book(101, "SBMS", "NITIN", 300.0, "Backend"),
						new Book(102, "CORE", "NITIN", 200.0, "Backend"),
						new Book(103, "ADV", "ZABI", 400.0, "Backend"),
						new Book(104, "REACT", null, 500.0, "Frontend"),
						new Book(105, "HTML", "NITIN", 600.0, "Frontend"),
						new Book(106, "CSS", null, 300.0, "Frontend"),
						new Book(107, "ANGULAR", "NITIn", 800.0, "Frontend"),
						new Book(108, "SQL", "ZABI", 200.0, "Database")
						)
				);
		 repo.getBooksByAuthor("NITIN").forEach(System.out::println);
		//repo.getBooksAuthorCost("r%", 200.0).forEach(System.out::println);
		//repo.getBooksIds(Arrays.asList(101,106,108,111,134)).forEach(System.out::println);
	}
}

4. application.properties
spring.application.name=01-spring-data-jpa-crudrepository
spring.datasource.url = jdbc:mysql:///practise
spring.datasource.username = root
spring.datasource.password=root123

#hibernate using jpa properties
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true


Note: For other Non-Select operations like Update and delete we need to use annotations like @Query("HQL"), @Modifying and @Transactional
a. 
@Modifying
@Query("delete from Student where sname= :sname")
@Transactional
public int deleteStudentBySname(String sname);

b. 
@Modifying
@Query("update Student set sage = :sage where sname =:name")
@Transactional
public int updateStudentBySage(Integer sage, String name);















